// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Event {
  id Int @id @default(autoincrement())

  eventId     String
  name        String
  channelId   String
  description String? @db.VarChar(4096)
  coverImage  String? @db.VarChar(512)
  hostId      Int?
  messageId   String?

  active       Int       @default(1)
  scheduleTime DateTime?
  startTime    DateTime?
  endTime      DateTime?

  voiceLogs    VoiceLog[]
  stats        UserStat[]
  games        GameResult[]
  gameResults  UserGameResult[]
  userMutes    UserMute[]
  host         User?            @relation(fields: [hostId], references: [id])
  hostWorkflow HostWorkflow?
}

model User {
  id              Int      @id @default(autoincrement())
  userId          String   @unique
  username        String?
  displayName     String?
  memberName      String?
  avatarURL       String?
  memberAvatarURL String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // 関連
  voiceLogs    VoiceLog[]
  stats        UserStat[]
  gameResults  UserGameResult[]
  userMutes    UserMute[]
  hostedEvents Event[]
  hostRequests HostRequest[]
}

model VoiceLog {
  id Int @id @default(autoincrement())

  eventId   Int
  userId    Int
  timestamp DateTime @default(now())
  join      Boolean

  event Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  stat  UserStat @relation(fields: [eventId, userId], references: [eventId, userId], onDelete: Cascade)
  user  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserStat {
  eventId Int
  userId  Int

  duration Int
  show     Boolean?
  memo     String?  @db.VarChar(512)

  voiceLogs VoiceLog[]
  event     Event      @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([eventId, userId], name: "id")
}

model UserMute {
  id      Int      @id @default(autoincrement())
  userId  Int
  eventId Int?
  muted   Boolean
  time    DateTime @default(now())

  event Event? @relation(fields: [eventId], references: [id], onDelete: SetNull)
  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model GameResult {
  id Int @id @default(autoincrement())

  eventId Int
  name    String
  url     String?
  image   String? @db.VarChar(512)

  users UserGameResult[]
  event Event            @relation(fields: [eventId], references: [id], onDelete: Cascade)
}

model UserGameResult {
  id Int @id @default(autoincrement())

  eventId Int
  userId  Int
  gameId  Int
  rank    Int
  xp      Float
  group   String?

  event Event      @relation(fields: [eventId], references: [id], onDelete: Cascade)
  game  GameResult @relation(fields: [gameId], references: [id], onDelete: Cascade)
  user  User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([gameId, userId])
}

enum HostRequestStatus {
  WAITING // 順番待ち（まだDM送信していない）
  PENDING // 依頼中（DM送信済み、返答待ち）
  ACCEPTED // 承認
  DECLINED // 承認されなかった（拒否・期限切れ・他者承認等）
}

model HostWorkflow {
  id                   Int      @id @default(autoincrement())
  eventId              Int      @unique
  allowPublicApply     Boolean  @default(false) // 並行公募フラグ
  publicApplyMessageId String? // 公募メッセージID
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  event    Event         @relation(fields: [eventId], references: [id], onDelete: Cascade)
  requests HostRequest[] // このワークフローに属するリクエスト
}

model HostRequest {
  id          Int               @id @default(autoincrement())
  workflowId  Int // ワークフローID（外部キー）
  priority    Int // 依頼順（1番手、2番手、3番手...）
  userId      Int // 依頼対象ユーザーID
  status      HostRequestStatus @default(WAITING)
  message     String?           @db.VarChar(1000) // 個別カスタム依頼メッセージ
  dmMessageId String? // DMのメッセージID
  expiresAt   DateTime // 期限
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  workflow HostWorkflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  user     User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([workflowId, userId]) // 同じワークフローの同じユーザーへの重複依頼を防ぐ
  @@unique([workflowId, priority]) // 同じワークフローで同じ順番の重複を防ぐ
}
